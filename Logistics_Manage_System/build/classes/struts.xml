<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
	"http://struts.apache.org/dtds/struts-2.3.dtd">

<struts>

	<!-- 配置 Struts2 可以受理的请求的扩展名 -->
	<constant name="struts.action.extension" value="action,do,"></constant> 

    <constant name="struts.enable.DynamicMethodInvocation" value="false" />
    <constant name="struts.devMode" value="true" />
    <constant name="struts.action.excludePattern" value="/static/.*?" />
	
	
	<!-- 设置浏览器是否缓存静态内容,默认值为true(生产环境下使用),开发阶段最好关闭 -->
    <constant name="struts.serve.static.browserCache" value="false" />
    
    <!-- 当struts的配置文件修改后,系统是否自动重新加载该文件,默认值为false(生产环境下使用),开发阶段最好打开 -->
    <constant name="struts.configuration.xml.reload" value="true" />
    
    <!-- 开发模式下使用,这样可以打印出更详细的错误信息 -->
    <constant name="struts.devMode" value="true" />

    <package name="default" namespace="/" extends="struts-default">
    
    	<!-- 定义新的拦截器栈, 配置 prepare 拦截器栈的 alwaysInvokePrepare 参数值为 false -->
		<interceptors>
			<interceptor-stack name="sshStack">
				<interceptor-ref name="paramsPrepareParamsStack">
					<param name="prepare.alwaysInvokePrepare">false</param>
				</interceptor-ref>
			</interceptor-stack>
		</interceptors>
		
		<!-- 使用新的拦截器栈 -->
		<default-interceptor-ref name="sshStack"></default-interceptor-ref>
		
		
		<action name="user-*" class="userAction"
        	method="{1}">
        	
			<result name="list">/index.jsp</result>
			
			<result name="exit">/index.jsp</result>
			
		</action>
		
		<action name="order-*" class="orderAction"
        	method="{1}">
        	
			<result name="save">/index.jsp</result>
			
		</action>
		
		<!-- 获取验证码 -->
		<action name="captcha" class="com.wt.action.VerifyCodeAction"
				method="captcha">
			
		</action>
		
		<action name="createImageAction" class="com.wt.action.CreateImageAction">
			<result name="success" type="stream">
                <param name="contentType">image/jpeg</param>
                <param name="inputName">inputStream</param>
            </result>
		</action>

		<!-- 用户登录跳转链接 -->		
		<action name="userLogin">
			<result>/WEB-INF/user/login.jsp</result>
		</action>
		
		<!-- 用户注册跳转链接 -->		
		<action name="userRegister">
			<result>/WEB-INF/user/register.jsp</result>
		</action>
		
		<!-- 用户名验证 -->
		<action name="usernameCheck" class="userValidate"
				method="usernameCheck">
	    	<result name="usernameSuccess" type="httpheader">  
		    	<param name="status">200</param>
		    </result>
		    
		    <result name="usernameError" type="httpheader">  
		    	<param name="status">400</param>
		    </result>
        </action>
        
        <!-- 邮箱验证 -->
		<action name="emailCheck" class="userValidate"
				method="emailCheck">
	    	<result name="emailSuccess" type="httpheader">  
		    	<param name="status">200</param>
		    </result>
		    
		    <result name="emailError" type="httpheader">  
		    	<param name="status">400</param>
		    </result>
        </action>
        
        
		<!-- 跳转到购物页面  -->
		<action name="userShopping">
			<result>/WEB-INF/shopping/shopping.jsp</result>
		</action>
		
		<!-- 跳转到html介绍页面  -->
		<action name="htmlMore">
			<result>/WEB-INF/book_readMore/html_more.jsp</result>
		</action>
		
		<!-- 跳转到java购物页面  -->
		<action name="javaBuy">
			<result>/WEB-INF/trolley/java_trolley.jsp</result>
		</action>
		
		<!-- 跳转到管理员页面  -->
		<action name="adminPage">
			<result>/WEB-INF/admin/admin_index.jsp</result>
		</action>
		
    </package>
    
    
    
    <package name="json" extends="json-default" namespace="/">
    
    	<!-- 以下为用户登录时的json数据的配置 -->
    	<action name="jsonLogin" class="com.wt.jsonHandle.LoginJsonHandle"
				method="jsonLogin">
            <!-- 此处将reslut的值返回给客户端，root的值对应要返回的值的属性result
                                                   注意：root为固定写法，否则不会把result的值返回给客户端 -->
			<result type="json">
				<param name="root">dataMap</param>
			</result>
		</action>
		
		<!-- 以下为用户注册时的json数据的配置 -->
		<action name="save" class="com.wt.jsonHandle.RegisterJsonHandle"
				method="save">
            <!-- 此处将reslut的值返回给客户端，root的值对应要返回的值的属性result
                                                   注意：root为固定写法，否则不会把result的值返回给客户端 -->
			<result type="json">
				<param name="root">dataMap</param>
			</result>
		</action>
    
    </package>
    

</struts>
